<?php
/**
 * DbManager获取Query结果
 * User: Siam
 * Date: 2020/1/16
 * Time: 10:33
 */

namespace EasySwoole\ORM\Tests;

use EasySwoole\Mysqli\Client;
use EasySwoole\Mysqli\Exception\Exception;
use EasySwoole\Mysqli\QueryBuilder;
use EasySwoole\ORM\AbstractModel;
use EasySwoole\ORM\Db\Config;
use EasySwoole\ORM\Db\Connection;
use EasySwoole\ORM\Db\MysqliClient;
use EasySwoole\ORM\Db\Result;
use EasySwoole\ORM\DbManager;
use PHPUnit\Framework\TestCase;



use EasySwoole\ORM\Tests\models\TestUserListModel;

class DbManageLastQueryTest  extends TestCase
{
    /**
     * @var $connection Connection
     */
    protected $connection;
    protected $tableName = 'user_test_list';
    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $config = new Config(MYSQL_CONFIG);
        $this->connection = new Connection($config);
        DbManager::getInstance()->addConnection($this->connection);
        $connection = DbManager::getInstance()->getConnection();
        $this->assertTrue($connection === $this->connection);
    }

    /**
     * @throws \EasySwoole\ORM\Exception\Exception
     * @throws \Throwable
     */
    public function testLastQuery()
    {
        $testUserModel = new TestUserListModel();
        $testUserModel->state = 2;
        $testUserModel->name = 'Siam';
        $testUserModel->age = 18;
        $testUserModel->addTime = date('Y-m-d H:i:s');
        $data = $testUserModel->save();
        $this->assertIsInt($data);

        $this->assertInstanceOf(QueryBuilder::class, DbManager::getInstance()->getConnection()->defer()->lastQuery());
        $this->assertEquals(TestUserListModel::defer()->lastQuery(), DbManager::getInstance()->getConnection()->defer()->lastQuery());
    }

    /**
     * @throws \EasySwoole\ORM\Exception\Exception
     * @throws \Throwable
     */
    public function testLastQueryResult()
    {
        $testUserModel = new TestUserListModel();
        $testUserModel->state = 2;
        $testUserModel->name = 'Siam';
        $testUserModel->age = 18;
        $testUserModel->addTime = date('Y-m-d H:i:s');
        $data = $testUserModel->save();
        $this->assertIsInt($data);

        $this->assertInstanceOf(Result::class, DbManager::getInstance()->getConnection()->defer()->lastQueryResult());
        $this->assertEquals(TestUserListModel::defer()->lastQueryResult(), DbManager::getInstance()->getConnection()->defer()->lastQueryResult());
    }

    /**
     * @throws \EasySwoole\ORM\Exception\Exception
     * @throws \EasySwoole\Pool\Exception\PoolEmpty
     * @throws \Throwable
     */
    public function testInvokeLastQuery()
    {
        DbManager::getInstance()->invoke(function (MysqliClient $client){
            $testUserModel = TestUserListModel::invoke($client);
            $testUserModel->state = 2;
            $testUserModel->name = 'Siam';
            $testUserModel->age = 18;
            $testUserModel->addTime = date('Y-m-d H:i:s');
            $data = $testUserModel->save();
            $this->assertIsInt($data);

            $this->assertInstanceOf(QueryBuilder::class, $client->lastQuery());
        });
    }

    /**
     * @throws \EasySwoole\ORM\Exception\Exception
     * @throws \EasySwoole\Pool\Exception\PoolEmpty
     * @throws \Throwable
     */
    public function testInvokeLastQueryResult()
    {
        DbManager::getInstance()->invoke(function (MysqliClient $client){
            $testUserModel = TestUserListModel::invoke($client);
            $testUserModel->state = 2;
            $testUserModel->name = 'Siam';
            $testUserModel->age = 18;
            $testUserModel->addTime = date('Y-m-d H:i:s');
            $data = $testUserModel->save();
            $this->assertIsInt($data);

            $this->assertInstanceOf(Result::class, $client->lastQueryResult());
        });
    }

    public function testDeleteAll()
    {
        $res = TestUserListModel::create()->destroy(null, true);
        $this->assertIsInt($res);
    }
}